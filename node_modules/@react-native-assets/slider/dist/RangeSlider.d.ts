import React from 'react';
import * as RN from 'react-native';
export declare type SliderProps = RN.ViewProps & {
    range?: [number, number];
    minimumValue?: number;
    maximumValue?: number;
    minimumRange?: number;
    step?: number;
    outboundColor?: RN.ColorValue;
    inboundColor?: RN.ColorValue;
    thumbTintColor?: RN.ColorValue;
    thumbStyle?: RN.StyleProp<RN.ViewStyle>;
    trackStyle?: RN.StyleProp<RN.ViewStyle>;
    minTrackStyle?: RN.StyleProp<RN.ViewStyle>;
    midTrackStyle?: RN.StyleProp<RN.ViewStyle>;
    maxTrackStyle?: RN.StyleProp<RN.ViewStyle>;
    style?: RN.StyleProp<RN.ViewStyle>;
    inverted?: boolean;
    vertical?: boolean;
    enabled?: boolean;
    slideOnTap?: boolean;
    trackHeight?: number;
    thumbSize?: number;
    thumbImage?: RN.ImageURISource;
    crossingAllowed?: boolean;
    onValueChange?: (range: [number, number]) => void;
    onSlidingStart?: (range: [number, number]) => void;
    onSlidingComplete?: (range: [number, number]) => void;
    CustomThumb?: React.ComponentType<{
        value: number;
        thumb: 'min' | 'max';
    }>;
    CustomMark?: React.ComponentType<{
        value: number;
        active: boolean;
    }>;
};
declare const Slider: React.ForwardRefExoticComponent<RN.ViewProps & {
    range?: [number, number] | undefined;
    minimumValue?: number | undefined;
    maximumValue?: number | undefined;
    minimumRange?: number | undefined;
    step?: number | undefined;
    outboundColor?: RN.ColorValue | undefined;
    inboundColor?: RN.ColorValue | undefined;
    thumbTintColor?: RN.ColorValue | undefined;
    thumbStyle?: RN.StyleProp<RN.ViewStyle>;
    trackStyle?: RN.StyleProp<RN.ViewStyle>;
    minTrackStyle?: RN.StyleProp<RN.ViewStyle>;
    midTrackStyle?: RN.StyleProp<RN.ViewStyle>;
    maxTrackStyle?: RN.StyleProp<RN.ViewStyle>;
    style?: RN.StyleProp<RN.ViewStyle>;
    inverted?: boolean | undefined;
    vertical?: boolean | undefined;
    enabled?: boolean | undefined;
    slideOnTap?: boolean | undefined;
    trackHeight?: number | undefined;
    thumbSize?: number | undefined;
    thumbImage?: RN.ImageURISource | undefined;
    crossingAllowed?: boolean | undefined;
    onValueChange?: ((range: [number, number]) => void) | undefined;
    onSlidingStart?: ((range: [number, number]) => void) | undefined;
    onSlidingComplete?: ((range: [number, number]) => void) | undefined;
    CustomThumb?: React.ComponentType<{
        value: number;
        thumb: 'min' | 'max';
    }> | undefined;
    CustomMark?: React.ComponentType<{
        value: number;
        active: boolean;
    }> | undefined;
} & React.RefAttributes<RN.View>>;
export default Slider;
