"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const RN = __importStar(require("react-native"));
const useThumb_1 = __importDefault(require("./hooks/useThumb"));
const Track_1 = __importDefault(require("./components/Track"));
const Thumb_1 = __importDefault(require("./components/Thumb"));
const ResponderView_1 = __importDefault(require("./components/ResponderView"));
const useDrag_1 = __importDefault(require("./hooks/useDrag"));
const useCustomMarks_1 = __importDefault(require("./hooks/useCustomMarks"));
// We add a default padding to ensure that the responder view has enough space to recognize the touches
const styleSheet = RN.StyleSheet.create({
    vertical: {
        paddingHorizontal: 10
    },
    horizontal: {
        paddingVertical: 10
    }
});
const Slider = react_1.default.forwardRef((props, forwardedRef) => {
    const { minimumValue = 0, maximumValue = 1, value: propValue = minimumValue, step = 0, minimumTrackTintColor = 'grey', maximumTrackTintColor = 'grey', thumbTintColor = 'darkcyan', thumbStyle, trackStyle, minTrackStyle, maxTrackStyle, inverted = false, vertical = false, enabled = true, slideOnTap = true, trackHeight = 4, thumbSize = 15, thumbImage, onValueChange, onSlidingStart, onSlidingComplete, CustomThumb, CustomMark, ...others } = props;
    const { updateValue, value, canMove } = (0, useThumb_1.default)({
        minimumValue,
        maximumValue,
        value: propValue,
        step,
        slideOnTap,
        onValueChange
    });
    const { onPress, onMove, onRelease } = (0, useDrag_1.default)({ value, canMove, updateValue, onSlidingComplete, onSlidingStart });
    const percentage = react_1.default.useMemo(() => (value - minimumValue) / ((maximumValue - minimumValue) || 1), [value, minimumValue, maximumValue]);
    const { minStyle, maxStyle } = react_1.default.useMemo(() => ({
        minStyle: (trackStyle && minTrackStyle) ? [trackStyle, minTrackStyle] : trackStyle || minTrackStyle,
        maxStyle: (trackStyle && maxTrackStyle) ? [trackStyle, maxTrackStyle] : trackStyle || maxTrackStyle
    }), [trackStyle, minTrackStyle, maxTrackStyle]);
    const thumbProps = react_1.default.useMemo(() => ({
        color: thumbTintColor,
        style: thumbStyle,
        size: thumbSize,
        CustomThumb: CustomThumb,
        thumbImage
    }), [CustomThumb, thumbImage, thumbSize, thumbStyle, thumbTintColor]);
    const { marks, onLayoutUpdateMarks } = (0, useCustomMarks_1.default)(CustomMark, { step, minimumValue, maximumValue, activeValues: [value], inverted, vertical });
    return (react_1.default.createElement(RN.View, { ...others },
        react_1.default.createElement(ResponderView_1.default, { style: styleSheet[vertical ? 'vertical' : 'horizontal'], ref: forwardedRef, maximumValue: maximumValue, minimumValue: minimumValue, step: step, value: value, updateValue: updateValue, onPress: onPress, onMove: onMove, onRelease: onRelease, enabled: enabled, vertical: vertical, inverted: inverted, onLayout: onLayoutUpdateMarks },
            react_1.default.createElement(Track_1.default, { color: minimumTrackTintColor, style: minStyle, length: percentage * 100, vertical: vertical, thickness: trackHeight }),
            react_1.default.createElement(Thumb_1.default, { ...thumbProps, value: value }),
            react_1.default.createElement(Track_1.default, { color: maximumTrackTintColor, style: maxStyle, length: (1 - percentage) * 100, vertical: vertical, thickness: trackHeight }),
            marks)));
});
Slider.displayName = 'Slider';
exports.default = Slider;
